akka {
  loglevel = INFO
  loglevel = ${?LOG_LEVEL}

  stdout-loglevel = "ERROR"
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = cluster

    serializers {
      employeeSerializer = "kz.dar.tech.akka.persistence.template.serializable.proto.EmployeeEventSerializer"
      bookShopSerializer = "kz.dar.tech.akka.persistence.template.serializable.proto.BookShopSerializer"
    }

    serialization-bindings {
      "kz.dar.tech.akka.persistence.template.model.protobuf.EmployeeProtoEvent" = employeeSerializer
      "kz.dar.tech.akka.persistence.template.model.protobuf.BookShopProtoEvent" = bookShopSerializer
    }

  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://Template@127.0.0.1:2551",
      "akka://Template@127.0.0.1:2552"
    ]
  }


  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
  }
}


event-processor {
  id = "EventProcessor"            // type name of sharded event processor
  keep-alive-interval = 2 seconds  // event-processors ping interval
  tag-prefix = "tag"               // even processor tag prefix
  parallelism = 4                  // number of event processors
}

askTimeout = 10 s


akka.persistence.cassandra {
  events-by-tag {
    bucket-size = "Day"
    # for reduced latency
    eventual-consistency-delay = 200ms
    flush-interval = 50ms
    pubsub-notification = on
    refresh-interval = 2s
    first-time-bucket = "20200115T00:00"
  }

   query {
      refresh-interval = 2s
    }

    journal.keyspace-autocreate = on
    journal.tables-autocreate = on
    snapshot.keyspace-autocreate = on
   snapshot.tables-autocreate = on


  journal {
    keyspace = "template"
    table = "events"
  }


  snapshot {
    replication-strategy = "SimpleStrategy"
    keyspace = "template_snapshot"
    table = "snapshots"
  }

  replication-strategy = "SimpleStrategy"
  #replication-factor = 3

}


cassandra-query-journal.gap-free-sequence-numbers = on
akka.actor.allow-java-serialization = on
akka.actor.warn-about-java-serializer-usage = off

http-server {
  interface = "0.0.0.0"
  interface = ${?HOSTNAME}
  port = 0
  port = ${?PORT}

  swagger-host = "localhost:8080"
  swagger-host = ${?SWAGGER_HOST}

  swagger-schemes = "http"
  swagger-schemes = ${?SWAGGER_SCHEME}
}

askTimeout = 10 s